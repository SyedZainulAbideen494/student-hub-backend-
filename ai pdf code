// Define storage for PDF uploads
const pdfStorage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, '/root/student-hub-backend-/public/'); // Save PDFs in a dedicated folder
  },
  filename: (req, file, cb) => {
    const ext = path.extname(file.originalname);
    cb(null, `${Date.now()}${ext}`); // Timestamp to ensure unique file names
  },
});

// File filter for PDFs
const pdfFileFilter = (req, file, cb) => {
  if (file.mimetype === 'application/pdf') {
    cb(null, true);
  } else {
    cb(new Error('Invalid file type. Only PDFs are allowed.'), false);
  }
};

// Multer instance for PDF uploads
const uploadPDF = multer({
  storage: pdfStorage,
  fileFilter: pdfFileFilter,
  limits: { fileSize: 10 * 1024 * 1024 }, // Limit file size to 10 MB
});












app.post('/api/chat/ai', uploadPDF.single('pdf'), async (req, res) => {
    try {
      const { message, chatHistory, token } = req.body;
  
      // Validate inputs
      if (!message || !token) {
        return res.status(400).json({ error: 'Message and token are required.' });
      }
  
      // Get user ID from token
      const userId = await getUserIdFromToken(token);
      if (!userId) {
        return res.status(401).json({ error: 'Invalid token or user not authenticated.' });
      }
  
      let parsedChatHistory = [];
      if (chatHistory) {
        try {
          parsedChatHistory = JSON.parse(chatHistory);
        } catch (e) {
          return res.status(400).json({ error: 'Invalid chat history format.' });
        }
      }
  
      // Ensure chat history starts with a valid 'user' role
      if (!parsedChatHistory.length || parsedChatHistory[0].role !== 'user') {
        return res.status(400).json({ error: 'Chat history must start with role "user".' });
      }
  
      let pdfText = '';
      let pdfError = false;
  
      if (req.file) {
        // Extract text from the uploaded PDF
        const pdfPath = req.file.path;
        try {
          pdfText = await pdfParse(fs.readFileSync(pdfPath)).then((data) => data.text);
          if (!pdfText) {
            console.log(`User ID: ${userId} - Unable to extract text from PDF.`);
            pdfError = true; // Indicate PDF could not be read
          }
        } catch (error) {
          console.error(`Error extracting text from PDF for User ID: ${userId}:`, error);
          pdfError = true; // Indicate PDF could not be read
        }
      }
  
      // Combine PDF text with the user message
      const finalMessage = pdfText ? `${pdfText}\n\n${message}` : message;
  
      // Log the type of message
      console.log(
        `User ID: ${userId}, Message Type: ${req.file ? 'With PDF' : 'Just Message'}, Message: ${message}`
      );
  
      // Start a new chat session
      const chat = model.startChat({
        history: parsedChatHistory,
      });
  
      // Send the message to the AI model
      const result = await chat.sendMessage(finalMessage);
      let aiResponse = result.response.text();
  
      // Append a note about PDF reading issues if applicable
      if (pdfError) {
        aiResponse += ' (PDF could not be read)';
      }
  
      // Log success and AI's response
      console.log(`AI Response for User ID: ${userId} - Success`);
      console.log(`AI Responded `);
  
      // Save the interaction in the database
      await query(
        'INSERT INTO ai_history (user_id, user_message, ai_response) VALUES (?, ?, ?)',
        [userId, message, aiResponse]
      );
  
      // Send the AI response back to the client
      res.json({ response: aiResponse });
    } catch (error) {
      console.error('Error in /api/chat/ai endpoint:', error);
      res.status(500).json({
        error: 'An error occurred while processing your request. Please try again later.',
      });
    }
  });
  