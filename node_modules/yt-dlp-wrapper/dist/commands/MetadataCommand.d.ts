import MetadataEventEmitter, { MetadataEvents } from '../events/MetadataEventEmitter.js';
import { Modify } from '../types/utilities.js';
import VideoDetails from '../types/VideoDetails.js';
export interface MetadataCommandQueueOptions {
    concurrency: number;
    timeout?: number;
    autoStart: boolean;
}
export interface MetadataCommandOptions {
    queue: MetadataCommandQueueOptions;
}
export type MetadataCommandConstructorOptions = Modify<Partial<MetadataCommandOptions>, {
    queue?: Partial<MetadataCommandQueueOptions>;
}>;
declare class MetadataCommand {
    private emitter;
    private queue;
    private processes;
    private readonly options;
    constructor(options?: MetadataCommandConstructorOptions);
    get(url: string): void;
    getSync(url: string): Promise<VideoDetails[]>;
    terminate(url?: string): void;
    clear(): void;
    on<E extends keyof MetadataEvents>(event: E, callback: MetadataEvents[E]): MetadataEventEmitter;
    emit<E extends keyof MetadataEvents>(event: E, ...args: Parameters<MetadataEvents[E]>): boolean;
    private runTask;
}
export default MetadataCommand;
